{"version":3,"sources":["components/Article.js","components/ArticleList.js","components/SearchBox.js","components/Scroll.js","containers/AppArticles.js","serviceWorker.js","index.js"],"names":["Article","title","category","image","link","className","alt","src","href","target","rel","ArticleList","items","map","item","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","children","AppArticles","onSearchChange","event","setState","value","state","fetch","then","response","json","articles","this","filteredItems","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kSAceA,EAZC,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAEvC,OACI,yBAAKC,UAAU,mBACX,yBAAKC,IAAI,cAAcC,IAAG,+DAA0DJ,KACpF,4BAAKF,GACL,uBAAGI,UAAU,YAAYH,GACzB,yBAAKG,UAAU,QAAO,uBAAGG,KAAMJ,EAAMK,OAAO,SAASC,IAAI,uBAAnC,wBCcnBC,EApBK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACI,yBAAKP,UAAU,gBAEPO,EAAMC,KAAI,SAACC,EAAMC,GACb,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLZ,MAAOS,EAAMG,GAAGZ,MAChBF,MAAOW,EAAMG,GAAGd,MAChBC,SAAUU,EAAMG,GAAGb,SACnBE,KAAMQ,EAAMG,GAAGX,YCC5Ba,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,yBAAKd,UAAU,cACX,2BACIA,UAAU,+BACVe,KAAK,SACLC,YAAY,mBACZC,SAAYH,MCIZI,G,MAVD,SAACC,GAEZ,OACI,yBAAKnB,UAAU,YACVmB,EAAMC,YCyCJC,G,kBAzCX,aAAe,IAAD,8BACV,+CAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEX,YAAaU,EAAMnB,OAAOqB,SAb1C,EAAKC,MAAQ,CACTnB,MAAO,GACPM,YAAa,IAJP,E,iFAQO,IAAD,OAChBc,MAAM,+DACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAQ,OAAI,EAAKP,SAAS,CAAEjB,MAAOwB,S,+BAOvC,IAAD,EAC0BC,KAAKN,MAA5BnB,EADH,EACGA,MAAOM,EADV,EACUA,YACToB,EAAgB1B,EAAM2B,QAAO,SAAAzB,GAC/B,OAAOA,EAAKb,MAAMuC,cAAcC,SAASvB,EAAYsB,kBAIzD,OAAQ5B,EAAM8B,OAIN,yBAAKrC,UAAU,gBACX,wBAAIA,UAAU,MAAd,wBACA,kBAAC,EAAD,CAAWc,aAAckB,KAAKV,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAaf,MAAO0B,MAPhC,yBAAKjC,UAAU,cAAf,+B,GA3BcsC,cCMNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACG,kBAAC,EAAD,MACVC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bdcd6a41.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Article = ({ title, category, image, link}) => {\r\n\r\n    return (\r\n        <div className='tc article-item'>\r\n            <img alt='ipropaganda' src={`https://ipropaganda.com/sites/default/files/articles/${image}`} />\r\n            <h2>{title}</h2>\r\n            <p className='category'>{category}</p>\r\n            <div className='link'><a href={link} target='_blank' rel=\"noopener noreferrer\">Read full article</a></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Article;","import React from 'react';\r\nimport Article from './Article';\r\n\r\nconst ArticleList = ({ items }) => {\r\n    return (\r\n        <div className='article-list'>\r\n            {\r\n                items.map((item, i) => {\r\n                    return (\r\n                        <Article\r\n                            key={i}\r\n                            image={items[i].image}\r\n                            title={items[i].title}\r\n                            category={items[i].category}\r\n                            link={items[i].link}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArticleList;\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='search pa2'>\r\n            <input \r\n                className='pa3 ba b--green c--lightgrey'\r\n                type='search' \r\n                placeholder='start typing ...' \r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n    \r\n    return (\r\n        <div className='list-box'>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n export default Scroll;","import React, { Component } from 'react';\r\nimport ArticleList from '../components/ArticleList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './AppArticles.css';\r\n\r\nclass AppArticles extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            items: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://ipropaganda.com/content/article-simple?_format=json')\r\n            .then(response=> response.json())\r\n            .then(articles => this.setState({ items: articles }));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const { items, searchfield } = this.state;\r\n        const filteredItems = items.filter(item => {\r\n            return item.title.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        \r\n        // if(items.length === 0) { return first } else { return second} \r\n        return !items.length ?           \r\n            <div className='loading f3'>Content is fetching ...</div> :\r\n            \r\n            (\r\n                <div className='tc container'>\r\n                    <h1 className='f1'>ipropaganda Articles</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ArticleList items={filteredItems} />\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n    \r\n}\r\n\r\nexport default AppArticles;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppArticles from './containers/AppArticles';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n            <AppArticles />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}